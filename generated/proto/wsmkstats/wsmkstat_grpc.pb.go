// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v3.12.4
// source: protocols/wsmkstat.proto

package wsmkstats

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	AllMarketsStatEventService_StreamAllMarketsStatEvent_FullMethodName = "/mkstatsevent.AllMarketsStatEventService/StreamAllMarketsStatEvent"
)

// AllMarketsStatEventServiceClient is the client API for AllMarketsStatEventService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type AllMarketsStatEventServiceClient interface {
	StreamAllMarketsStatEvent(ctx context.Context, opts ...grpc.CallOption) (AllMarketsStatEventService_StreamAllMarketsStatEventClient, error)
}

type allMarketsStatEventServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewAllMarketsStatEventServiceClient(cc grpc.ClientConnInterface) AllMarketsStatEventServiceClient {
	return &allMarketsStatEventServiceClient{cc}
}

func (c *allMarketsStatEventServiceClient) StreamAllMarketsStatEvent(ctx context.Context, opts ...grpc.CallOption) (AllMarketsStatEventService_StreamAllMarketsStatEventClient, error) {
	stream, err := c.cc.NewStream(ctx, &AllMarketsStatEventService_ServiceDesc.Streams[0], AllMarketsStatEventService_StreamAllMarketsStatEvent_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &allMarketsStatEventServiceStreamAllMarketsStatEventClient{stream}
	return x, nil
}

type AllMarketsStatEventService_StreamAllMarketsStatEventClient interface {
	Send(*WsAllMarketsStatEvent) error
	CloseAndRecv() (*StreamAllMarketsStatEventResponse, error)
	grpc.ClientStream
}

type allMarketsStatEventServiceStreamAllMarketsStatEventClient struct {
	grpc.ClientStream
}

func (x *allMarketsStatEventServiceStreamAllMarketsStatEventClient) Send(m *WsAllMarketsStatEvent) error {
	return x.ClientStream.SendMsg(m)
}

func (x *allMarketsStatEventServiceStreamAllMarketsStatEventClient) CloseAndRecv() (*StreamAllMarketsStatEventResponse, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(StreamAllMarketsStatEventResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// AllMarketsStatEventServiceServer is the server API for AllMarketsStatEventService service.
// All implementations must embed UnimplementedAllMarketsStatEventServiceServer
// for forward compatibility
type AllMarketsStatEventServiceServer interface {
	StreamAllMarketsStatEvent(AllMarketsStatEventService_StreamAllMarketsStatEventServer) error
	mustEmbedUnimplementedAllMarketsStatEventServiceServer()
}

// UnimplementedAllMarketsStatEventServiceServer must be embedded to have forward compatible implementations.
type UnimplementedAllMarketsStatEventServiceServer struct {
}

func (UnimplementedAllMarketsStatEventServiceServer) StreamAllMarketsStatEvent(AllMarketsStatEventService_StreamAllMarketsStatEventServer) error {
	return status.Errorf(codes.Unimplemented, "method StreamAllMarketsStatEvent not implemented")
}
func (UnimplementedAllMarketsStatEventServiceServer) mustEmbedUnimplementedAllMarketsStatEventServiceServer() {
}

// UnsafeAllMarketsStatEventServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to AllMarketsStatEventServiceServer will
// result in compilation errors.
type UnsafeAllMarketsStatEventServiceServer interface {
	mustEmbedUnimplementedAllMarketsStatEventServiceServer()
}

func RegisterAllMarketsStatEventServiceServer(s grpc.ServiceRegistrar, srv AllMarketsStatEventServiceServer) {
	s.RegisterService(&AllMarketsStatEventService_ServiceDesc, srv)
}

func _AllMarketsStatEventService_StreamAllMarketsStatEvent_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(AllMarketsStatEventServiceServer).StreamAllMarketsStatEvent(&allMarketsStatEventServiceStreamAllMarketsStatEventServer{stream})
}

type AllMarketsStatEventService_StreamAllMarketsStatEventServer interface {
	SendAndClose(*StreamAllMarketsStatEventResponse) error
	Recv() (*WsAllMarketsStatEvent, error)
	grpc.ServerStream
}

type allMarketsStatEventServiceStreamAllMarketsStatEventServer struct {
	grpc.ServerStream
}

func (x *allMarketsStatEventServiceStreamAllMarketsStatEventServer) SendAndClose(m *StreamAllMarketsStatEventResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *allMarketsStatEventServiceStreamAllMarketsStatEventServer) Recv() (*WsAllMarketsStatEvent, error) {
	m := new(WsAllMarketsStatEvent)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// AllMarketsStatEventService_ServiceDesc is the grpc.ServiceDesc for AllMarketsStatEventService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var AllMarketsStatEventService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "mkstatsevent.AllMarketsStatEventService",
	HandlerType: (*AllMarketsStatEventServiceServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "StreamAllMarketsStatEvent",
			Handler:       _AllMarketsStatEventService_StreamAllMarketsStatEvent_Handler,
			ClientStreams: true,
		},
	},
	Metadata: "protocols/wsmkstat.proto",
}
